help()
library(rspatial)
if(!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
data(package=.packages(all.available = TRUE))
#if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
#data(package=.packages(all.available = TRUE))
#if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
#if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
#if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
#data(package=.packages(all.available = TRUE))
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
#data(package=.packages(all.available = TRUE))
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
## Loading required package: rspatial
#data(package=.packages(all.available = TRUE))
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
#if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
d <- sp_data('precipitation')
head(d)
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
devtools::install_github("hadley/devtools")
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
install.packages("devtools")
devtools::install_github("rspatial/rspatial")
install.packages("devtools")
d <- sp_data('precipitation')
library(rspatial)
devtools::install_github("rspatial/rspatial")
install.packages("devtools")
devtools::install_github("rspatial/rspatial")
library(rspatial)
d <- sp_data('precipitation')
head(d)
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
install.packages("devtools")
devtools::install_github("rspatial/rspatial")
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
d <- sp_data('precipitation')
head(d)
devtools::install_github("rspatial/rspatial")
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
d <- sp_data('precipitation')
head(d)
install.packages("rspatial")
install.packages("devtools")
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
library(rspatial)
d <- sp_data('precipitation')
head(d)
install.packages("rspatial")
licence()
upgrade()
upgrade()
upgrade("upgrade")
upgrade(r)
install.packages("rspatial")
update(R)
updateR()
install.packages("installr")
updateR()
install.packages("installr")
library(installr)
updateR()
install.packages("rspatial")
devtools::install_github("rspatial/rspatial")
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
install.packages("devtools")
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
install.packages("Rtools")
install.packages("rspatial")
library(rspatial)
install.packages("rspatial/rspatial")
install.packages("devtools")
devtools::install_github("rspatial/rspatial")
install.packages("devtools")
devtools::install_github("rspatial/rspatial")
library(rspatial)
d <- sp_data('precipitation')
head(d)
lilibrary(rspatial)
library(rspatial)
d<- sp-data('precipitation')
d<- sp_data('precipitation')
head(d)
#computing annual precipitation
d$prec<- rowSums(d[,c(6:17)])
plot(sort(d$prec),ylab='annual precipitation(mm)',las=1,xlab='stationa')
library(sp)
#lets make a quick map
?sp
disp<- SpatialPoints(d[,4:3],proj4string = CRS("+proj=longlat +datum=NAD83"))
disp<- SpatialPointsDataFrame(disp,d)
CA<- sp_data("counties")
cuts<- c(0,200,300,500,1000,3000)
blues<- colorRampPalette(c('yellow','orange','blue','dark blue'))
pols<- list("sp.polygons",CA,fill="lightgray")
spplot(disp,'prec',cuts=cuts,col.region=blues(5),sp.layout=pols,pch=20,cex=2)
TA <- CRS("+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +datum=NAD83 +units=m +ellps=GRS80 +towgs84=0,0,0")
library(rgdal)
dta <- spTransform(disp, TA)
cata <- spTransform(CA, TA)
library(rgdal)
install.packages("rgdal")
#install.packages("rgdal")
library(rgdal)
dta <- spTransform(disp, TA)
cata <- spTransform(CA, TA)
sqrt(mean((predicted-observed)^2, na.rm=TRUE))
#we are going to are going to interpolate the precipitation values
RMSE<-function(observed,predicted){
sqrt(mean((predicted-observed)^2, na.rm=TRUE))
}
RMSE <- function(observed, predicted) {
sqrt(mean((predicted - observed)^2, na.rm=TRUE))
}
null<- RMSE(mean(disp$prec),disp$prec)
null
install.packages("dismo")
#proximity polygons//nearest neightbour interpolation
install.packages("dismo")
#proximity polygons//nearest neightbour interpolation
#install.packages("dismo")
library(dismo)
#proximity polygons//nearest neightbour interpolation
#install.packages("dismo")
library(dismo)
#proximity polygons//nearest neightbour interpolation
#install.packages("dismo")
library(dismo)
v<- voronoi(dismo)
plot(v)
#proximity polygons//nearest neightbour interpolation
#install.packages("dismo")
library(dismo)
v<- voronoi(dismo)
#proximity polygons//nearest neightbour interpolation
#install.packages("dismo")
install.packages("deldir")
#proximity polygons//nearest neightbour interpolation
#install.packages("dismo")
#install.packages("deldir")
library(dismo)
v<- voronoi(dismo)
library(dismo)
v <- voronoi(dta)
plot(v)
library(dismo)
v <- voronoi(dismo)
plot(v)
library(dismo)
v <- voronoi(dta)
plot(v)
ca<- aggregate(cata)
vca<- intersect(vca,'prec',col.regions=rev(get_col_regions()))
vca<- intersect(v,ca)
ca<- aggregate(cata)
vca<- intersect(v,ca)
ca<- aggregate(cata)
ca<- aggregate(cata)
library(rspatial)
d<- sp_data('precipitation')
head(d)
#computing annual precipitation
d$prec<- rowSums(d[,c(6:17)])
plot(sort(d$prec),ylab='annual precipitation(mm)',las=1,xlab='stationa')
#lets make a quick map
?sp
library(sp)
dsp<- SpatialPoints(d[,4:3],proj4string = CRS("+proj=longlat +datum=NAD83"))
dsp<- SpatialPointsDataFrame(dsp,d)
CA<- sp_data("counties")
cuts<- c(0,200,300,500,1000,3000)
blues<- colorRampPalette(c('yellow','orange','blue','dark blue'))
pols<- list("sp.polygons",CA,fill="lightgray")
spplot(dsp,'prec',cuts=cuts,col.region=blues(5),sp.layout=pols,pch=20,cex=2)
#trsnsforning the lat and long to planar cordonates using crs for caalifornia
TA <- CRS("+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +datum=NAD83 +units=m +ellps=GRS80 +towgs84=0,0,0")
#install.packages("rgdal")
library(rgdal)
dta <- spTransform(dsp, TA)
cata <- spTransform(CA, TA)
#we are going to are going to interpolate the precipitation values
RMSE <- function(observed, predicted) {
sqrt(mean((predicted - observed)^2, na.rm=TRUE))
}
null<- RMSE(mean(dsp$prec),dsp$prec)
null
#proximity polygons//nearest neightbour interpolation
#install.packages("dismo")
#install.packages("deldir")
library(dismo)
v <- voronoi(dta)
plot(v)
# confining to calofornia
ca<- aggregate(cata)
# confining to calofornia
install.packages("rgeos")
# confining to calofornia
#install.packages("rgeos")
ca<- aggregate(cata)
vca<- intersect(v,ca)
spplot(vca,'prec',col.regions=rev(get_col_regions()))
spplot(vca, 'prec', col.regions=rev(get_col_regions()))
ca <- aggregate(cata)
vca <- intersect(v, ca)
spplot(vca, 'prec', col.regions=rev(get_col_regions()))
ca <- aggregate(cata)
vca <- intersect(v, ca)
spplot(vca, 'prec', col.regions=rev(get_col_regions()))
ggplot(vca, 'prec', col.regions=rev(get_col_regions()))
spplot(vca, 'prec', col.regions=rev(get_col_regions()))
spplot(vca, 'prec', col.regions=rev(get_col_regions()))
head(d)
